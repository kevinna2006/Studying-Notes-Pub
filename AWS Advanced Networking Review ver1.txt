


************* Chapter 1&2 ****************
******************************************


******** 1: 7 layers of OSI part 1********

7: application : application protocol added in; this layer understands the ports and protocol; 
6: presentation :
5: session : Connections; keep the session open; session perception. Port concept on this layer to allow multiple services to be addressed in one host;
4: transport: segment/data segment; flow control & error correction; TCP and UDP; 
3: network : packets; IP address; source and destination;  IP, ICMP, IPX
2: datalink: mac address;frame; sequencing (re-order the sequence of the frame) and flow control (too fast and slow down); error correction
1: physical: signal, media type

each layer talks to equal layer, and invisable to other layers.

encapsulation starts from Transport layer



******** 2: 7 layers of OSI part 2 ********

router behavior : decapsulate the frame, check the ip, and re-encapsulate with destination mac and send out.




******** 3: IPv4 - PART1 ********

IP: 32 bits value - 4 x 8bits blocks Octecs
netmask: class and classless

remember some common case:

/25 = 128 addresses incl. reserved - 10.0.0.0 - 10.0.0.127
/24 = 256 addresses incl. reserved - 10.0.0.0 - 10.0.0.255
/23 = 512 addresses incl. reserved - 10.0.0.0 - 10.0.1.255
/22 = 1024 addresse incl. reverved - 10.0.0.0 - 10.0.3.255



******** 4:IPv4 - PART2 ********

Divide the subnet into multiple ones.

e.g. 10.0.32.0/24 ----split into 4 x smaller ones ---> 10.0.32.0/26
calculate the network address first
10.0.32.0 
10.0.32.64
10.0.32.128
10.0.32.192

Then, make up the rest of each subnet:
10.0.32.0 - 10.0.32.63
10.0.32.64 - 10.0.32.127
10.0.32.128 - 10.0.32.191
10.0.32.192 - 10.0.32.255

broadcast the broadcast IP address to gain the MAC address.

router will check the routing table to find what the next hop is

aggregation: 10.0.32.0/24  ; 10.0.33.0/24  ; 10.0.34.0/24   ;  10.0.35.0/24

first goes 10.0.32.0/24 + 10.0.33.0/24, then will be easy to work out both of them can be replaced by 10.0.32.0/23. same way to do 10.0.34.0/24 + 10.0.35.0/24, the aggregation will be 10.0.34.0/23

second goes to consider 10.0.32.0/23 and 10.0.34.0/23 (255.255.252.0). the aggregation will be 10.0.32.0/22.

routing table will selete the more specific routes to send the traffic out


******** 5:IPv4 - PART3 ********

Publick class:
class A : 1 - 126      255.0.0.0  or  /8	126 networks
class B : 128 - 191    255.255.0.0  or /16	16384 networks
class C : 192 - 223    255.255.255.0  or /24    2097150 networks
class D : 224 - 239    reserved for multicasting
class E : 240 -254     reserved for research

Private class:
A : 10.0.0.0			255.0.0.0
B : 172.16.0.0 - 172.31.0.0  	255.240.0.0	172.16.0.0 - 172.31.255.255
C : 192.168.0.0			255.255.255.0	192.168.0.0 - 192.168.255.255

NAT will be applied for private IP transitting within the INTERNET
	

******** 6: Vlans, Access Ports & Trunks ********

HUB : will distribute the traffic to all the ports in it. -  layer 1

Switch : seperate the different broadcast colision domain/segment - layer 2.Switch will learn the MAC address based on the ports recieving the MAC from.  however when the broadcast traffic, the Switch acts as a HUB, distribute the boradcast to all ports.

Vlan : split the colision domain / broadcast domain into multiple ones. 802.1q

Access port : only carry only one vlan - it is non-vlan aware, so remove the vlan tag, when the packet is leaving the switch port

Trunk port : can carry multiple vlans -it is vlan-aware port, won't remove the vlan tag, when the packet is getting into another switch via the trunk port.

Ethernet frame - max size = 1518 bytes, after inserting the tag, it becomes a bit bigger to be 1522 bytes.


what is the default/native vlan?




******** 7: IPSEC VPN ********

5 steps to achieve it:
1: to address the interesting traffic that is generated by the vpn source peer. using ACLs
2: IKE phase 1 : stablishing the initial idnentity of the peer, authenticating who you are, negotiating the security association that is agreement between the 2 peers for what methods encryption they will use & integraty checking (harshing) during the communications. pre-share key will be used, Differ-haman algrisim.  eventually, a secured tunnel between 2 peers will be established.
3: IKE phase 2 : 
4: IPSEC Tunnel : 
5: Tunnel termination : if there is no intereting traffic anymore, the tunnel will be terminated.

'VGW' within AWS is used for both direct connect and IPsec VPN

In AWS, also create CGW that represents the remote end/site, create "VPN connection" within AWS to link to the VGW. generally, create 2 x VPN connections called VPN-Endpoint for resilience. during creating VPN connections, AWS will provide neccessary security parameters and authentication details. introduction will be disccussed later. 2 x VPN-Endpoints can connect to 1 x CGW, or 2 x CGW

The VGW will be the next hop from customer route perspective.


******** 8: DNS Part1 ********

DNS is hierarchical and distributed system; 

Generic top-level domain -gTLD such as .com   .net   .org   .guru . those are contoled by IANA - global organization; 

Country top-level domain - ccTLD such as .uk .au  .se .cn

Sponsored top-level domain - sTLD such as .mil  .gov  .edu  .int

DNS has ROOT servers - 300+ servers, geographic Grouping;

13 Anycast IPs - operated by 12 organisations. generally, one anycast ip provied by one organisation, only a special one provies 2 IPs

Root zone - hosted by Root servers holds the xTLD records; it is CONTROLED BY IANA, and hosted by operators

zone file can be leased 1 or more authoritive servers(1.2.3.4  2.3.4.5), zone file can also contains subdomain. e.g.  .uk has subdomain .co.uk, and the subdomain can be leased with same authoritive server (1.2.3.4) or seperate authoritive server (3.4.5.6).

** register process **
Business domain name register (e.g. widget.co.uk) can be applied directly with the owner of the domain .uk (like "nominate"), or it can be applied throught the reseller such as "jims Domain Inc". the reseller will register the business domain name "widget.co.uk" to the nominate, as well as forward the chosen business domain-name-server IP address (it is the DNS IP of the business) to the nomnate too. then nominate will add the entry "widget.co.uk" into the zone file with the record pointing back the business DNS server that widget company provided when it applied originally. that means widget business DNS server will be the authoritive server for the new domain name "widge.co.uk". Widget company can assign the extra domain head of the domain name. e.g. www.widget.co.uk

** DNS query process **
any client/PC send the query to the local DNS (that could just a caching DNS, therefore only cache the DNS records ). the local DNS check the local zone file to find if the query belongs to the local domain name, if yes, job done!, if not, then the local DNS will check if there is a forwarding server configured, if not, then local dns server will send query ("do you know www.widget.co.uk?") to the Root servers (300+ servers), the root server, of-course, has no idea about the www.widget.co.uk but it knows the authoritive server that is responsible for the .uk, then root server send the back to the local dns server and provide the server ip of the authoritive server of ".uk", again, local dns then send the same query to the authoritive serer of ".uk" ("do you know www.widget.co.uk?"), with same behaviour, the authoritive server of ".uk" will say "no", but it knows the authoritive server IP for ".co.uk". subsequently, local dns then send the same query to the authoritive serer of ".co.uk" ("do you know www.widget.co.uk?"). and again with the same behaviour, the authoritive server of ".co.uk" has no record for www.widget.co.uk, but it knows the widget.co.uk with records pointing to the widge company's dns server IP, that IP is sent back to the local dns, subsequently, same query happened again to be sent to the dns server of widget.co.uk, eventurely, the record is found within the zone file of the dns server of widget company, and the IP is provided to the local dns, therefore, the client/pc gains the IP of the www.widge.co.uk.


example of a zone file: 

$TTL : requires remote server to keep the record, but the remote server does not have to obey the time.

$ORIGIN : such as : example.com  : list the start of the domain name.

SOA 's ttl value override the $TTL value

?? need to look into zone file explanation more ??





******** 9: BGP fundamentals ********

tcp-179; manual peering; 

path-vector (not link-state or distance-vector), so path choice is political, can be flexibly changed (influnced by local administrator).   BGP only shares "best path" to peers, not "every path".

eBGP : different AS number peering; iBGP : same AS number

?? need to review the BGP path selection algrithm.??



******** 10: MED  ********

the first valid path = current best path then other path will be compared with this path by BGP protocol.

MED : Multi-Exit Discriminator

Weight - Local to router and vendor specific (cisco support, but other vendor may not)- highest wins; won't advertise to peer router

Local Preference - default is 100, more higher, more priority; advertise internally.

Local Origination - learned locally, or from another IGP(internal routing protocols).

AS_path - more shorter, more perferred;

Origin-code - IGP < EGP(not use anymore) < INCOMPLETE

* MED - Metric attribute - Lowest preferred !! only be used for 2 directly connected BGP peers, NOT advertised. to influnce the peer to choose which link/path it should choose to coming in. another way to say: A --connects to --- B, confige the MED on A to influnce B to choose different link to go to A. 

the rest selection princinples won't appears in the exam. reference doco for read:
cisco website /support/docs/ip/border-gateway-protocol-bgp/13753-25.html




************* Chapter 3 ****************
****************************************


******** 11: AWS Global & Regional Architecture********

The name of the AZ under a region won't point to the same AZ for each of account/customer, e.g. one customer gets -1a, for another customer, it doesn't mean it is in the same AZ -1a.

some region has 2 AZ, some has 3 AZ, some has 5 AZ. each AZ can contain 1 big DC or multiple smaller DCs.

because EBS is resiliance, but only within the AZ. that means if whole AZ fails, it definitely impact the EBS within that AZ.

(*?*)Edge Location - used by cloudfront, it locates outside of the AWS VPC

single subnet can not span the multiple AZ. 1-subnet<->1-AZ. once pick the AZ when you create the subnet, can not be changed later.

end points (half way between AWS and publich internet) : S3, DynamoDB, Cloudwatch, Cloudformation, SQS etc...

IGW - can allow the VPC services to access Public Internet, also based on some condistions, to allow the public service to access resource within AWS VPC.

AWS guarentee the latency between 2 x AZs is less than 2ms. another service - placement group within AZ can increase the performance as well.



******** 12: VPC and Basic Networking design Part 1********

you should have multiple VPC per Account and per Region. VPC can not span multiple Region.

all security entitis have been built in the VPC, so you don't have to create a VPC for security purpose, but you can do that if you really want to.

3 things to create a VPC:
1: VPC name Tag; identity and used by API or CLI. changeable later.
2: CIDR block ; NOT Changeable. 
3: Tenancy; NOT Changeable. 2 options : default mode & dedicated mode (dedicated mode will get all the resources created withint this VPC will use dedicated mode e.g. EC2 will use dedicated) but for default mode, you can be flexible to create the resource within the VPC to choose dedicated mode later.




******** 13: VPC and Basic Networking Design Part 2********

CIDR block - from /16  to /28

a few consideration when allocate CIDR block:
1: integration with other VPCs; should no potential IP overlap range. but AWS does not prevent you to use same IP range technially.that is AWS does support multiple VPC to use same IP range! once you decided, you won't change it later.
2: integration with on-premise networks. aim to no IP overlap between VPC and your on-premise network
3: Suitable for sub-netting.

IP range allocation for AZ:  e.g. 10.0.0.0/16 is provided to you, and you have 3 AZs to use, then you have to splite the 10.0.0.0/16 into 4 smaller ranges with /18. they are 10.0.0.0/18; 10.0.64.0.0/18; 10.0.128.0/18; 10.0.196.0/18; then, you choose the first 3 IP ranges for each of AZ, and the last IP range can be used as a spare ip range for future.

IP range allocation for tiers: if you have 4 tiers: EXT; DMZ; INT; DB; so for one IP range 10.0.0.0/18, you can further splite it into another 4 ranges which is /20, but for futher grow, you can splite it into 8 ranges which is /21. it is beneficial if you want to granually control the traffic by using nACLs, more specific/smaller IP range will help you to control it.

be careful to use default VPC, because all the default VPC in all the regions are the same: 172.31.0.0/16.


******** 14: Deep dive VPC Router ********

one VPC routers logically, but actually there are multiple routers for each of subnet you create. 1 subnet = 1 router + 5 IP addresses reserved. note: always remove 5 IPs from IP range.
1: network address reserved; 
2: broadcast address reserved; 
3: first IP for gateway; 
4: second IP for DNS; 
5: third IP for further use;


VPC router has some rules:
1: always with the IP .1 and 100% avaialble;
2: as baseline, all the subnets can communicate to each other;
3: it must be broker communicatioin between other AWS network constructure where avaialbe e.g. igw, nat, vgw.

DHCP enabled in VPC. a DHCP serve is setup for whole VPC

by default, main routing table contains 1 block route to allow all the subnets communication each other. best practice to create each routing table to associate with each subnet, rather than using the main routing table. 

the main routing table is as a fail-back when you forget to assign a routing table to a subnet that will automaticly be assigned the main routing table.  it can be acheived by automation.

private zone can communicate with on-premise network via Virtual Private Gateway-VGW
private zone can communicate with Internet or outside AWS endpoint such as S3 via Internet Gateway - IGW.



******** 15: ENI, EIP & IGW Part 1********

Elastic Network Internet -ENI is a "virtual network interface" and is attached to the Instance during the creation time; ENI provide the network connectivity for the instance. and instance at least has one ENI associated.

ENI is associated to Instance when startup is slight different from the ENI that is created externally and is attached to the instance when the instance running; the key different is: ENI associated with Instance when it is created can NOT be dettached from instance!!

ENI contains a few information: 
1: MAC address (virtual hardware address), it is with ENI for lifecycle; 
2: Internal IP address: allocated by the VPC DHCP server; it is static and taken from subnet IP range. ENI is allocated a primary IP that can not be changed, but you can allocate a second IP address by automatic allocated again or mannually specify one. ENI that is attached externally can ALSO be allocated automatically or mannually specify one. the number of IP for ENI is limited by the machine type (which type of EC2), but not by the type o ENI. note:!! the limite exists, but it depends on the type of the instance.
3: Dynamic External IP: !! remember !! it is optional when you are creating the instance. you can not add it after you create Instance, and also you can not add it to an external created ENI. it is external IP, but not EIP. this public IP is dynamically allocated from a availabe AWS public IP pool (this pool is not specific for your account). it will be changed when the instance stop and start.
4: Elastic External IP : it is bound to your account. it is public and routable. you create it and link it to your account. it is a external static one and based on the account ,so it works across the AZs.  EIP can be associated with ENI specificaly as a single IP on that ENI, when done, it is linked to the ENI primary IP directly, traffic from link private IP will be translated to the EIP when the packet leaving the AWS environment and going to the internet.  if EIP is associated with the primary interface of the instance,  the external IP that allocated automatically during the instance creation will be overwriten or replaced by EIP.
note:!! the ENI can be moved between the instances within the AZ, assuming it is not the ENI that is created during the instance creation!! all the mac address, internal IP address, external IP address moves along with the ENI.!!
5: SRC/DES check: only for NAT instance feature;
6: Security Group: SG is attached to the ENI, not attached to the instance actually;

ENI is AZ-scope concept, only create it within speicific 1 x AZ and can not move to another AZ. but Elastic IP belongs to yur account and works across the AZs

******** 16: ENI, EIP & IGW Part 2 ********
Don't forget 1 x VPC has 1 x Router (actually, each subnet has each router); 2 essential condisions for Internet accessing : 1: Instance has a public IP (dynamic or EIP); 2: route table has a routes pointing to the IGW.

IGW : provides 1: IP translation service; 2: Routing service; Actually, when either a Dynamic public IP or a EIP is allocated to a instance, a map entry will be added into IGW Private-Public mapping table. The process is : after checking the route table, the packet is decided to be forwarded to IGW via VPC router, the IGW check the mapping table and find which public IP (dynamic or EIP) should be used to do the " source NAT" of this packet, after Source NAT, the packet will be sent to INTERNET. When the response pakcet comes back the process works reversely. Similar with Cisco NAT mechanism. 

As the public IP address is managed by IGW externally, that is why you could not see the public IP information when you try some command at OS layer of the instance e.g. c:/> ipconfig (windows) or ifconfig -a (Unix)

one more point : IGW also provides access services of other AWS endpoint such as S3 endpoint etc... AWS keeps adding more private endpoint for more and more other services in future, but for some service, currently, we have to still use IGW to access INTERNET.

ENI applied in a design:
1: Instance can sits between 2 subnets /note: generally, instance sits in one subnet. why? because we can assign a external ENI to the instance, therefore, the instance has 2 x ENIs, one is the primary one for the application, another one can be used as management port that locates in the management subnet. that is why we say the instance sits between 2 subnets.

2: since we got 2 ENIs, and we know the Security Group is assigned to the ENI, not the instance, we can assign 2 SGs to each of ENI for different purpose. e.g. 1 SG is used on public ENI to allow the tcp 6554 as application requests, another  SG can be used on management ENI to allow the tcp 22 for SSH. 1 SG can do the job, but recommended 2 SG for easy managing.

3: EIP can be assign to the ENI of application/public, so that the users from INTERNET can access that IP, and the management port can be access from the customer on-premise network.

4: with dualhome ENI, you not only improve the security from OS layer based on the different ENI, but also you can enable the "Flow Logs". "Flow Logs" allow us to gain the dignostic information of various entities within AWS. in this case, Flow Logs can be scoped to specific ENI. so seperate ENI can avoid annoy information between app ENI and mgmt ENI. It is also applied for CloudWatch with specific ENI logs.

5: if the app does not function the http/https that disallow you to use classic ELB (for HTTP/HTTPs), if you want to maintanence the primary server, by using EIP,you can design a portable endpoint for incoming traffic, that means that you can disassociate the EIP from primary server and attche it to the backup server's ENI.

6: another useful example is "software license" requirement. generally, the software license needs to bind the MAC address or Internal IP address with the Network Interface. so you can create a secondary ENI and attach the license to this ENI, at last attach this ENI into the Instance. So, license lifecircle is binded with the 2nd ENI, and you can migrate the 2nd ENI between the Instances, instead of migrating the software license between the machines.

7: During the instance creation, you can not create additional ENI, but you can do it via CLI or API.


******** 17: Deep Dive Security Group & NACL Part 1 & Part 2 & Part 3 ********
on the perimeter of VPC there are ingress and egress points: IGW and VPG; IGW<->INTERNET & AWS public endpoint;  VPG <-> On-premises network; 

Security Group is Object-based. it can be applied to many objects such as EC2, ELB, RDS etc..  Security Group is scoped to VPC, only can be used within VPC (except for using VPC peers).

A default Security Group is genreated when VPC creation, if you don't specify the custom SG, the default SG will be applied.

SG likes a wrapper around the object it arounds e.g. Instance, so SG won't impact the application running on the instance to access metadata in the instance. If you want to control the traffic within the instance, you may need to appy another filter such as Firewall or Proxy.

one SG can be applied to multiple objects;  2 x notes to be remembered : 1:one instance can have multiple SGs, evaluate all the rules in all the SGs; 2: SG actually is applied to the ENI (not instance itself), !!! which can cause  seperate Rules is applied to seperate EIP or seperate ENIs, also seperate subnets (because ENI can allow the Instance to be located within 2 subnets as dual home) 

NACL is subnet level, applied to subnet, one subnet only has one active NACL. SG is object level, applied to object e.g. Instance; When VPC created, the default NACL is created. one instance can have multiple SG;

because SG is object based, that is why SG-1 can quote another SG-2 as a source, that means all the object associated with that SG-2 are allowed by this SG-1, this is convenient when those object with SG-2 is changed to a new IP, you don't have to modify this SG-1; also in future, as long as you assign a new object with SG-2, then automatically, the new object will obtain the access by the SG-1;

*!* important note: SG can reference itself as source! for example, for domain controlers, ther will be a lot of ports need to be open within the SG, if you configure by one to one, then it is hard to deal with hundreds of machines. So, the solution is: you can define a SG with those ports open, then reference this SG itself as source, for every machine associated with this SG, will be able to talk to all other domain controlers.

NACL is stateless; NACL always has IP address or CIDR ranges; 

for source port/Ephemeral port selection, IOS: tcp sequential choose (start from 49152 to 65535), udp random; Linux & FreeBSD: all random;

SG has no concept of deny actions. it is stateful. review the default rules for :
1: default NACL:
2: Customerised NACL:
3: Default SG:
4: Customerised SG:

******** 18:  Deep Dive NAT Gateway ********






******** 1: ********






******** 1: ********








******** 1: ********






******** 1: ********






******** 1: ********








******** 1: ********






******** 1: ********






******** 1: ********








******** 1: ********






******** 1: ********






******** 1: ********








******** 1: ********






******** 1: ********






******** 1: ********








******** 1: ********






******** 1: ********






******** 1: ********








******** 1: ********






******** 1: ********






******** 1: ********








******** 1: ********






******** 1: ********






******** 1: ********








******** 1: ********






******** 1: ********






******** 1: ********








******** 1: ********






******** 1: ********






******** 1: ********








******** 1: ********






******** 1: ********






******** 1: ********








******** 1: ********






******** 1: ********






******** 1: ********








******** 1: ********






******** 1: ********






******** 1: ********








******** 1: ********






******** 1: ********






******** 1: ********



